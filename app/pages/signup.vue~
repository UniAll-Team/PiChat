<template>
	<UCard
		class="max-w-sm w-full bg-white/75 dark:bg-white/5 backdrop-blur">
		<UAuthForm :fields="fields" :schema="schema"
			:providers="<any>providers" align="top"
			title="Create an account"
			:ui="{ base: 'text-center', footer: 'text-center' }"
			:submit-button="{ label: 'Create account' }"
			@submit="signup">
			<template #description>
				<i18n-t tag="p" keypath="loginPrompt"
					class="text-primary font-medium">
					<template #loginLink>
						<NuxtLink to="/login" class="font-medium">
							{{ t('loginLink') }}
						</NuxtLink>
					</template>
				</i18n-t>
			</template>

			<template #footer>
				<i18n-t tag="p" keypath="footerAgreement"
					class="text-primary font-medium">
					<template #termsOfService>
						<NuxtLink to="/" class="font-medium">
							{{ t('termsOfService') }}
						</NuxtLink>
					</template>
				</i18n-t>
			</template>
		</UAuthForm>
	</UCard>
</template>

<i18n lang="yaml">
en:
  signupTitle: Create an account
  loginPrompt: Already have an account? {loginLink}.
  loginLink: Login
  termsOfService: Terms of Service
  footerAgreement: By signing up, you agree to our {termsOfService}.
  emailPlaceholder: Enter your email
  passwordPlaceholder: Enter your password
  confirmPasswordPlaceholder: Confirm your password
  signupSuccessMessage: You have successfully logged in.
  signupButton: Create account
  signupError: Signup Error
  signupSuccess: Signup Successful
  passwordMatchError: Passwords do not match

zh-Hans:
  signupTitle: 创建账户
  loginPrompt: 已有账户？{loginLink}。
  loginLink: 登录
  termsOfService: 服务条款
  footerAgreement: 注册即表示您同意我们的{termsOfService}。
  emailPlaceholder: 输入您的邮箱
  passwordPlaceholder: 输入您的密码
  confirmPasswordPlaceholder: 确认您的密码
  signupSuccessMessage: 您已成功登录。
  signupButton: 创建账户
  signupError: 注册错误
  signupSuccess: 注册成功
  passwordMatchError: 两次输入的密码不匹配

ar:
  signupTitle: إنشاء حساب
  loginPrompt: هل لديك حساب بالفعل؟ {loginLink}.
  loginLink: تسجيل الدخول
  termsOfService: شروط الخدمة
  footerAgreement: بالتسجيل، فإنك توافق على {termsOfService} الخاصة بنا.
  emailPlaceholder: أدخل بريدك الإلكتروني
  passwordPlaceholder: أدخل كلمة المرور
  confirmPasswordPlaceholder: تأكيد كلمة المرور
  signupSuccessMessage: لقد سجلت الدخول بنجاح.
  signupButton: إنشاء حساب
  signupError: خطأ في التسجيل
  signupSuccess: تم التسجيل بنجاح
  passwordMatchError: كلمات المرور غير م
</i18n>

<script setup lang="ts">
import { z } from 'zod'

definePageMeta({
	layout: 'auth',
	title: 'Sign up',
})

const { t } = useI18n()

const supabase = useSupabaseClient()

const config = useRuntimeConfig()

const { toastError, toastSuccess } = useAppToast()

const fields = [
	{
		name: 'email',
		type: 'email',
		label: 'Email',
		placeholder: 'Enter your email',
	},
	{
		name: 'password',
		label: 'Password',
		type: 'password',
		placeholder: 'Enter your password',
	},
	{
		name: 'confirmPassword',
		label: 'Confirm Password',
		type: 'password',
		placeholder: 'Confirm your password',
	}
]

const schema = z
	.object({
		email: z.string().email(),
		password: passwordSchema,
		confirmPassword: z.string(),
	})
	.refine(({ password, confirmPassword }) => password === confirmPassword, {
		message: t('passwordMatchError'),
		path: ['confirmPassword'],
	})

const providers = useLoginProviders()

async function signup({ email, password }: { email: string, password: string }) {
	const { error } = await supabase.auth.signUp({
		email,
		password,
		options: {
			emailRedirectTo: config.public.i18n.baseUrl,
			data: {
				full_name: email.split('@')[0]
			}
		}
	})

	if (error) {
		toastError(t('signupError'), error.message)

		return
	}

	toastSuccess(t('signupSuccess'), t('signupSuccessMessage'))
}
</script>
